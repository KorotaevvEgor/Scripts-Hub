#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ "–ü–∞—Ä—Å–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–π ¬´–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞¬ª" 
"""

import os
import django
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/var/www/scriptshub/Scripts-Hub/vacancy_parser')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vacancy_parser.settings')
django.setup()

from scripts.models import Script, ScriptRun
from scripts.parser import HHVacancyParserDjango
from django.contrib.auth.models import User
from django.utils import timezone

def test_first_script():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü"""
    
    print("üß™ –¢–ï–°–¢ –ü–ï–†–í–û–ì–û –°–ö–†–ò–ü–¢–ê")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç (ID=1)
    script = Script.objects.get(id=1)
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç: {script.name}")
    print(f"üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"  - –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {script.get_search_queries_list()}")
    print(f"  - –†–µ–≥–∏–æ–Ω: {dict(script.REGION_CHOICES).get(script.region)}")
    print(f"  - ID —Ä–µ–≥–∏–æ–Ω–æ–≤: {script.get_region_ids()}")
    print(f"  - –ú–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü: {script.max_pages}")
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ 1 –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    original_max_pages = script.max_pages
    script.max_pages = 1
    script.save()
    print(f"üîß –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –º–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞: {script.max_pages}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.objects.first()
    if not user:
        user = User.objects.create_user(username='testuser', email='test@test.com')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ScriptRun
    test_run = ScriptRun.objects.create(
        script=script,
        status='running',
        started_by=user
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π ScriptRun ID: {test_run.id}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        parser = HHVacancyParserDjango(test_run)
        print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        print(f"\nüöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–ê–†–°–ò–ù–ì (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —Ç–µ—Å—Ç–∞)...")
        parser.run()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        test_run.refresh_from_db()
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"  - –°—Ç–∞—Ç—É—Å: {test_run.status}")
        print(f"  - –ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {test_run.total_found}")
        print(f"  - –ù–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {test_run.new_vacancies}")
        print(f"  - –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö: {test_run.existing_vacancies}")
        
        if hasattr(parser, 'query_stats'):
            print(f"\nüìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            for query, stats in parser.query_stats.items():
                print(f"  '{query}':")
                print(f"    - –ù–∞–π–¥–µ–Ω–æ –≤ API: {stats.get('found_in_api', 0)}")
                print(f"    - –°–æ–±—Ä–∞–Ω–æ: {stats.get('collected_by_script', 0)}")
                print(f"    - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {stats.get('filtered_out', 0)}")
                print(f"    - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {stats.get('unique_vacancies', 0)}")
                print(f"    - –î—É–±–ª–∏–∫–∞—Ç–æ–≤: {stats.get('duplicates', 0)}")
        
        if test_run.status == 'completed' and test_run.total_found > 0:
            print(f"\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –ü–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            if test_run.total_found > 50:
                suggested_pages = min(20, int(test_run.total_found / 50) + 5)
                print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü = {suggested_pages}")
            else:
                print(f"üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –û—Å—Ç–∞–≤–∏—Ç—å –º–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü = {original_max_pages}")
                
        else:
            print(f"\n‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–≤—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º!")
            if test_run.log_data:
                print(f"üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:")
                log_lines = test_run.log_data.split('\n')
                for line in log_lines[-5:]:
                    if line.strip():
                        print(f"  {line}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        script.max_pages = original_max_pages
        script.save()
        print(f"\nüîß –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞–∫—Å. —Å—Ç—Ä–∞–Ω–∏—Ü: {script.max_pages}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
        test_run.delete()
        print(f"üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π ScriptRun —É–¥–∞–ª–µ–Ω")

if __name__ == "__main__":
    test_first_script()
