#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ Scripts-Hub
"""

import os
import json
from datetime import datetime

def cleanup_vacancy_files():
    """–£–¥–∞–ª–µ–Ω–∏–µ/–æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏"""
    
    print("üßπ –û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í –í–ê–ö–ê–ù–°–ò–ô –ù–ê –ü–õ–ê–¢–§–û–†–ú–ï")
    print("=" * 50)
    
    # –§–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏/—É–¥–∞–ª–µ–Ω–∏—è
    files_to_clean = [
        "/var/www/scriptshub/Scripts-Hub/previous_vacancies.json",
        "/var/www/scriptshub/Scripts-Hub/vacancy_parser/vacancy_backup.json",
        "/var/www/scriptshub/Scripts-Hub/vacancy_parser/scriptrun_script_mapping.json"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
    print("üìã –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í:")
    for file_path in files_to_clean:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            size_kb = round(size / 1024, 1)
            mod_time = datetime.fromtimestamp(os.path.getmtime(file_path))
            print(f"  ‚úÖ {os.path.basename(file_path)}: {size_kb} KB (–∏–∑–º–µ–Ω–µ–Ω: {mod_time.strftime('%d.%m.%Y %H:%M')})")
        else:
            print(f"  ‚ùå {os.path.basename(file_path)}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!")
    print("–ë—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã/—É–¥–∞–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
    for file_path in files_to_clean:
        if os.path.exists(file_path):
            print(f"  - {file_path}")
    
    confirmation = input("\n‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—á–∏—Å—Ç–∫—É? (–¥–∞/–Ω–µ—Ç): ").lower().strip()
    
    if confirmation not in ['–¥–∞', 'yes', 'y']:
        print("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
        return
    
    print(f"\nüßπ –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£...")
    
    cleaned_count = 0
    
    for file_path in files_to_clean:
        try:
            if os.path.exists(file_path):
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                
                print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: {os.path.basename(file_path)}")
                
                # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
                os.rename(file_path, backup_path)
                print(f"  ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: {os.path.basename(backup_path)}")
                
                # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è JSON —Ñ–∞–π–ª–æ–≤
                if file_path.endswith('.json'):
                    if 'previous_vacancies' in file_path:
                        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è previous_vacancies.json
                        empty_structure = {
                            "vacancies": [],
                            "last_update": datetime.now().isoformat(),
                            "total_count": 0
                        }
                    else:
                        # –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –¥—Ä—É–≥–∏—Ö JSON —Ñ–∞–π–ª–æ–≤
                        empty_structure = {}
                    
                    with open(file_path, 'w', encoding='utf-8') as f:
                        json.dump(empty_structure, f, ensure_ascii=False, indent=2)
                    
                    print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª: {os.path.basename(file_path)}")
                
                cleaned_count += 1
            else:
                print(f"  ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {os.path.basename(file_path)}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {os.path.basename(file_path)}: {str(e)}")
    
    print(f"\nüéâ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {cleaned_count}")
    print(f"  - –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {cleaned_count}")
    print(f"  - –°–æ–∑–¥–∞–Ω–æ –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleaned_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ß–ò–°–¢–ö–ò:")
    for file_path in files_to_clean:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            size_kb = round(size / 1024, 1)
            print(f"  ‚úÖ {os.path.basename(file_path)}: {size_kb} KB (–æ—á–∏—â–µ–Ω)")
        else:
            print(f"  ‚ùå {os.path.basename(file_path)}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print(f"\nüí° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å timestamp")
    print("2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–æ–≤")
    print("3. –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ Django –±–∞–∑–µ")
    print("4. Excel —Ñ–∞–π–ª—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Django views")

if __name__ == "__main__":
    cleanup_vacancy_files()
