#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ get_region_area_ids
"""

import os
import django
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/var/www/scriptshub/Scripts-Hub/vacancy_parser')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vacancy_parser.settings')
django.setup()

from scripts.models import Script, ScriptRun
from scripts.parser import HHVacancyParserDjango

def test_parser_methods():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–µ—Ä–∞"""
    
    print("üîß –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    script = Script.objects.first()
    if not script:
        print("‚ùå –°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç: {script.name}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏
    try:
        queries = script.get_search_queries_list()
        print(f"‚úÖ get_search_queries_list(): {queries}")
    except Exception as e:
        print(f"‚ùå get_search_queries_list(): {e}")
    
    try:
        region_ids = script.get_region_ids()
        print(f"‚úÖ get_region_ids(): {region_ids}")
    except Exception as e:
        print(f"‚ùå get_region_ids(): {e}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ScriptRun
    try:
        print(f"\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ScriptRun...")
        test_run = ScriptRun.objects.create(
            script=script,
            status='running',
            started_by_id=1  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å user —Å ID 1
        )
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω ScriptRun ID: {test_run.id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        print(f"\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞...")
        parser = HHVacancyParserDjango(test_run)
        print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥ check_safety_keywords
        print(f"\nüõ°Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ '–û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞'...")
        test_cases = [
            "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞",
            "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
            "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞"
        ]
        
        for title in test_cases:
            result = parser.check_safety_keywords(title)
            status = "‚úÖ –ü–†–û–ô–î–ï–¢" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–¢"
            print(f"  {status}: '{title}'")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
        test_run.delete()
        print(f"\nüóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π ScriptRun —É–¥–∞–ª–µ–Ω")
        
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        print(f"‚úÖ –ú–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"‚úÖ –§–∏–ª—å—Ç—Ä '–û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞' —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_parser_methods()
