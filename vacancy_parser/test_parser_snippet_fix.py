#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–µ—Ä–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å snippet
"""

import os
import django
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append('/var/www/scriptshub/Scripts-Hub/vacancy_parser')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'vacancy_parser.settings')
django.setup()

from scripts.models import Script, ScriptRun
from scripts.parser import HHVacancyParserDjango
from django.contrib.auth.models import User

def test_parser_with_limited_pages():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü"""
    
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∫—Ä–∏–ø—Ç
    script = Script.objects.first()
    if not script:
        print("‚ùå –°–∫—Ä–∏–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç: {script.name}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
    user = User.objects.first()
    if not user:
        user = User.objects.create_user(username='testuser', email='test@test.com')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ScriptRun
    test_run = ScriptRun.objects.create(
        script=script,
        status='running',
        started_by=user
    )
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π ScriptRun ID: {test_run.id}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
        parser = HHVacancyParserDjango(test_run)
        print(f"‚úÖ –ü–∞—Ä—Å–µ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π (1 —Å—Ç—Ä–∞–Ω–∏—Ü–∞)...")
        
        search_queries = script.get_search_queries_list()
        area_ids = script.get_region_ids()
        
        print(f"–ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {search_queries}")
        print(f"–†–µ–≥–∏–æ–Ω—ã: {area_ids}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å 1 —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        first_query = search_queries[0] if search_queries else "–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞"
        
        print(f"\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{first_query}'")
        vacancies = parser.search_vacancies_by_query(first_query, area_ids, max_pages=1)
        
        print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies)}")
        
        if vacancies:
            print(f"\nüîç –ê–ù–ê–õ–ò–ó –ù–ê–ô–î–ï–ù–ù–´–• –í–ê–ö–ê–ù–°–ò–ô:")
            for i, vacancy in enumerate(vacancies[:3], 1):
                title = vacancy.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                area = vacancy.get('area', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')
                company = vacancy.get('employer', {}).get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                print(f"{i}. {title}")
                print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {company}")
                print(f"   –†–µ–≥–∏–æ–Ω: {area}")
                print(f"   –ó–∞–ø—Ä–æ—Å: {vacancy.get('found_by_query', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if hasattr(parser, 'query_stats') and first_query in parser.query_stats:
            stats = parser.query_stats[first_query]
            print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê–ü–†–û–°–ê:")
            print(f"  - –ù–∞–π–¥–µ–Ω–æ –≤ API: {stats.get('found_in_api', 0)}")
            print(f"  - –°–æ–±—Ä–∞–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º: {stats.get('collected_by_script', 0)}")
            print(f"  - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {stats.get('filtered_out', 0)}")
            print(f"  - –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(vacancies)}")
        
        if len(vacancies) > 0:
            print(f"\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù! –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '–û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞'")
        else:
            print(f"\n‚ö†Ô∏è –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∏–ª—å—Ç—Ä —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å API.")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()
        
    finally:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
        test_run.delete()
        print(f"\nüóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π ScriptRun —É–¥–∞–ª–µ–Ω")

if __name__ == "__main__":
    test_parser_with_limited_pages()
