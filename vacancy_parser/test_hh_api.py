#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API HH.ru –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–π
"""

import requests
import json

def test_hh_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API HH.ru"""
    
    print("üîç –¢–ï–°–¢ API HH.RU")
    print("=" * 50)
    
    base_url = "https://api.hh.ru/vacancies"
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params = {
        'text': '–ò–Ω–∂–µ–Ω–µ—Ä –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞',
        'area': ['1', '1002'],  # –ú–æ—Å–∫–≤–∞ –∏ –ú–û
        'page': 0,
        'per_page': 5,
        'only_with_salary': False,
        'currency': 'RUR'
    }
    
    print(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API:")
    print(f"URL: {base_url}")
    print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
    
    try:
        response = requests.get(base_url, headers=headers, params=params)
        print(f"\nüìä –û—Ç–≤–µ—Ç API:")
        print(f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {data.get('found', 0)}")
            print(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(data.get('items', []))}")
            print(f"–°—Ç—Ä–∞–Ω–∏—Ü: {data.get('pages', 0)}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
            items = data.get('items', [])
            if items:
                print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–ï–†–í–´–• –í–ê–ö–ê–ù–°–ò–ô:")
                for i, vacancy in enumerate(items[:3], 1):
                    title = vacancy.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                    print(f"\n{i}. {title}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º snippet
                    snippet = vacancy.get('snippet', {})
                    print(f"   Snippet: {snippet}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º area
                    area = vacancy.get('area', {})
                    print(f"   –†–µ–≥–∏–æ–Ω: {area}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º employer
                    employer = vacancy.get('employer', {})
                    print(f"   –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å: {employer.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
                    requirement = (snippet.get('requirement', '') or '') if snippet else ''
                    responsibility = (snippet.get('responsibility', '') or '') if snippet else ''
                    description = requirement + ' ' + responsibility
                    
                    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ö—Ä–∞–Ω—É —Ç—Ä—É–¥–∞
                    safety_keywords = ['–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞', '–æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞', '–æ—Ö—Ä–∞–Ω—ã —Ç—Ä—É–¥–∞', '–æ—Ö—Ä–∞–Ω–æ–π —Ç—Ä—É–¥–∞']
                    text_to_search = f"{title} {description}".lower()
                    
                    found_keyword = None
                    for keyword in safety_keywords:
                        if keyword in text_to_search:
                            found_keyword = keyword
                            break
                    
                    if found_keyword:
                        print(f"   ‚úÖ –ü–†–û–ô–î–ï–¢ –§–ò–õ–¨–¢–† (–Ω–∞–π–¥–µ–Ω–æ: '{found_keyword}')")
                    else:
                        print(f"   ‚ùå –ù–ï –ü–†–û–ô–î–ï–¢ –§–ò–õ–¨–¢–†")
                        print(f"   –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞: '{text_to_search[:100]}...'")
            else:
                print("\n‚ùå –í–∞–∫–∞–Ω—Å–∏–∏ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text[:500]}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    test_hh_api()
